{"version":3,"file":"index.js","sourceRoot":"./src/","sources":["index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,IAAI,OAAO,EAAE,MAAM,oBAAoB,CAAA;AACpD,OAAO,EAAE,SAAS,EAAE,MAAM,WAAW,CAAA;AACrC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAA;AACnC,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAA;AACvC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAA;AAC1C,OAAO,KAAK,MAAM,OAAO,CAAA;AAEzB,MAAM,IAAI,GAAG,SAAS,CAAC,OAAO,CAAC,CAAA;AAE/B,SAAS,WAAW,CAAC,GAAW;IAC/B,IAAI,CAAC;QACJ,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAA;IACnC,CAAC;IAAC,MAAM,CAAC;QACR,OAAO,KAAK,CAAA;IACb,CAAC;AACF,CAAC;AAED,SAAS,SAAS,CAAC,IAAY;IAC9B,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;IAEpC,IAAI,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC;QACvB,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAA;QACvC,MAAM,CAAC,IAAI,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAA;IAClC,CAAC;IAED,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAA;AACtC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,KAAK,CAAC,GAAW,EAAE,IAAa;IACrD,SAAS,CAAC,GAAG,CAAC,CAAA;IAEd,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAA;IAE1B,MAAM,CAAC,GAAG,MAAM,IAAI,CAAC,iEAAiE,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,aAAa,EAAE,EAAE;QAC5H,GAAG;KAEH,CAAC,CAAA;IAEF,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IACrB,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;IAEd;;;;;;OAMG;AACJ,CAAC;AAED,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;KAC1B,OAAO,CAAC,cAAc,EAAE,mBAAmB,EAAE,CAAC,OAAO,EAAE,EAAE;IACzD,OAAO,OAAO;SACZ,UAAU,CAAC,MAAM,EAAE;QACnB,QAAQ,EAAE,gBAAgB;QAC1B,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC;KACxB,CAAC,CAAA;AACJ,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC;KACvD,KAAK,EAAE,CAAA","sourcesContent":["import { exec as rawExec } from \"node:child_process\"\r\nimport { promisify } from \"node:util\"\r\nimport { resolve } from \"node:path\"\r\nimport { hideBin } from \"yargs/helpers\"\r\nimport { rmSync, statSync } from \"node:fs\"\r\nimport yargs from \"yargs\"\r\n\r\nconst exec = promisify(rawExec)\r\n\r\nfunction isDirectory(str: string) {\r\n\ttry {\r\n\t\treturn statSync(str).isDirectory()\r\n\t} catch {\r\n\t\treturn false\r\n\t}\r\n}\r\n\r\nfunction cleanDist(root: string) {\r\n\tconst dist = resolve(root, \"./dist\")\r\n\t\r\n\tif (isDirectory(dist)) {\r\n\t\tconsole.log(\"Cleaning build output...\")\r\n\t\trmSync(dist, { recursive: true })\r\n\t}\r\n\t\r\n\tconsole.log(\"Build output is clean.\")\r\n}\r\n\r\nexport async function build(cwd: string, prod: boolean) {\r\n\tcleanDist(cwd)\r\n\t\r\n\tconsole.log(\"Building...\")\r\n\t\r\n\tconst r = await exec(`\"node_modules/.bin/webpack\" --config=webpack.config.js --mode=${prod ? \"production\" : \"development\"}`, {\r\n\t\tcwd,\r\n\t\t\r\n\t})\r\n\t\r\n\tconsole.log(\"Built!\")\r\n\tconsole.log(r)\r\n\t\r\n\t/*\r\n\t\t\"clean\": \"rm -rf ./dist\",\r\n\t\t\"build:types\": \"pnpm clean && tsc --emitDeclarationOnly\",\r\n\t\t\"build:dev\": \"pnpm clean && webpack --config=webpack.config.js --mode=development\",\r\n\t\t\"build\": \"pnpm clean && webpack --config=webpack.config.js --mode=production\",\r\n\t\t\"start\": \"node ./dist/backend/index.js\"\r\n\t */\r\n}\r\n\r\nyargs(hideBin(process.argv))\r\n\t.command(\"build <mode>\", \"Build the project\", (builder) => {\r\n\t\treturn builder\r\n\t\t\t.positional(\"mode\", {\r\n\t\t\t\tdescribe: \"The build mode\",\r\n\t\t\t\tchoices: [\"dev\", \"prod\"]\r\n\t\t\t})\r\n\t}, (argv) => build(process.cwd(), argv.mode === \"prod\"))\r\n\t.parse()\r\n"]}